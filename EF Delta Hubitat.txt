/**
 *  ****************  ECOFLOW DELTA PRO / DELTA 2 & RIVER SERIES MQTT DRIVER -   ****************
 *                    Work in Process - HTML tile code not working
 *               
 *                          
 *  D. Dimond 01/16/2023

 *  Design Usage:
 *  This driver is designed to control Ecowflow Delta 2 battery via MQTT - May work well with a Delta series batteries - TBD
 *  Driver will create a child switch for AC output, 12 DC output and USB output. 
 *       
 *   There is a lot of battery data - I have loaded a small collection to current device states - Load as much as you want by adding names to the attribute list. 
 *    
 *   Instructions are required to obtain your MQTT access keys. See Doc for instructions in github folder to obtain your passcodes.
 *   Special thanks to Mark H. for helping me obtain my MQTT codes and for getting MQTT Explorer up and running on my D2 battery. 
 * 
 * ------------------------------------------------------------------------------------------------------------------------------
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.

 *
 *
 *  Changes:
 *  0.0.14   added log note on error when driver settings are not saved.
 *  0.0.13   add draft river and delta pro test code - added river / deltapro and delta2 model selection to user inputs
 *  0.0.12   add rough code for river control of AC and LED light via USB switch
 *  0.0.11   added code to send capabilities for Battery Charge Level, PowerMeter AC Output Watts and Temperature of Main Battery Cell.
 *  0.0.10   only current device attributes that have changed are updated - added time out for deltaflag - both items will reduce data load
 *  0.0.9    add data change flag option to help track down data points names to add to metadata - added refreshdata button
 *  0.0.8    fixed error with no data load on initialization - added background data refresh rate.
 *  0.0.7    User can add/sub attributes -  defined attributes will be loaded to current states for use in rules/dashboards  
 *           All battery data is loaded as device states for review and to allow copy/paste to driver attributes in Metadata.
             C/F temp conversion removed.
 *  0.0.6 -  added temp in C or F input and conversion to C from F - test code commented out for autoload JSON keys to attribute names.
 *  0.0.5 - added prefix to data points - Corrected error with child switch types
 *  0.0.4 - MQTT Ecoflow Delta 2 Driver - Output Control for AC / DC / USB outputs


Delta 2 data list


    ACoutput : 0
    bms_bmsStatus.amp : 0
    bms_bmsStatus.bmsFault : 0
    bms_bmsStatus.bqSysStatReg : 0
    bms_bmsStatus.cellId : 2
    bms_bmsStatus.cycles : 16
    bms_bmsStatus.designCap : 20000
    bms_bmsStatus.errCode : 6
    bms_bmsStatus.f32ShowSoc : 100
    bms_bmsStatus.fullCap : 15448
    bms_bmsStatus.inputWatts : 0
    bms_bmsStatus.maxCellTemp : 19
    bms_bmsStatus.maxCellVol : 3330
    bms_bmsStatus.maxMosTemp : 20
    bms_bmsStatus.minCellTemp : 18
    bms_bmsStatus.minCellVol : 3328
    bms_bmsStatus.minMosTemp : 20
    bms_bmsStatus.num : 0
    bms_bmsStatus.openBmsIdx : 3
    bms_bmsStatus.outputWatts : 0
    bms_bmsStatus.remainCap : 15611
    bms_bmsStatus.remainTime : 0
    bms_bmsStatus.soc : 100
    bms_bmsStatus.soh : 0
    bms_bmsStatus.sysVer : 34275643
    bms_bmsStatus.tagChgAmp : 10000
    bms_bmsStatus.temp : 18
    bms_bmsStatus.type : 1
    bms_bmsStatus.vol : 53263
    bms_emsStatus.bmsIsConnt : [3, 3, 0]
    bms_emsStatus.bmsModel : 2
    bms_emsStatus.bmsWarState : 0
    bms_emsStatus.chgAmp : 25000
    bms_emsStatus.chgCmd : 1
    bms_emsStatus.chgRemainTime : 5939
    bms_emsStatus.chgState : 1
    bms_emsStatus.chgVol : 55521
    bms_emsStatus.dsgCmd : 1
    bms_emsStatus.dsgRemainTime : 5939
    bms_emsStatus.emsIsNormalFlag : 1
    bms_emsStatus.f32LcdShowSoc : 73.0
    bms_emsStatus.fanLevel : 0
    bms_emsStatus.lcdShowSoc : 73
    bms_emsStatus.maxAvailNum : 2
    bms_emsStatus.maxChargeSoc : 86
    bms_emsStatus.maxCloseOilEb : 100
    bms_emsStatus.minDsgSoc : 14
    bms_emsStatus.minOpenOilEb : 20
    bms_emsStatus.openBmsIdx : 3
    bms_emsStatus.openUpsFlag : 1
    bms_emsStatus.paraVolMax : 54522
    bms_emsStatus.paraVolMin : 52522
    bms_slave.amp : -50
    bms_slave.bmsFault : 0
    bms_slave.bqSysStatReg : 128
    bms_slave.cellId : 1
    bms_slave.cycles : 7
    bms_slave.designCap : 40000
    bms_slave.errCode : 0
    bms_slave.f32ShowSoc : 61.9
    bms_slave.fullCap : 39198
    bms_slave.inputWatts : 0
    bms_slave.maxCellTemp : 18
    bms_slave.maxCellVol : 3823
    bms_slave.maxMosTemp : 22
    bms_slave.minCellTemp : 18
    bms_slave.minCellVol : 3789
    bms_slave.minMosTemp : 22
    bms_slave.num : 1
    bms_slave.openBmsIdx : 3
    bms_slave.outputWatts : 0
    bms_slave.remainCap : 24290
    bms_slave.remainTime : 5999
    bms_slave.soc : 62
    bms_slave.soh : 0
    bms_slave.sysVer : 16842772
    bms_slave.tagChgAmp : 20000
    bms_slave.temp : 18
    bms_slave.type : 1
    bms_slave.vol : 53521
    inv.acDipSwitch : 0
    inv.acInAmp : 19
    inv.acInFreq : 0
    inv.acInVol : 0
    inv.cfgAcEnabled : 0
    inv.cfgAcOutFreq : 2
    inv.cfgAcOutVol : 120000
    inv.cfgAcWorkMode : 0
    inv.cfgAcXboost : 1
    inv.chargerType : 1
    inv.chgPauseFlag : 0
    inv.dcInAmp : 0
    inv.dcInTemp : 0
    inv.dcInVol : 0
    inv.dischargeType : 0
    inv.errCode : 0
    inv.fanState : 0
    inv.FastChgWatts : 0
    inv.inputWatts : 0
    inv.invOutAmp : 0
    inv.invOutFreq : 0
    inv.invOutVol : 0
    inv.invType : 0
    inv.outputWatts : 0
    inv.outTemp : 49
    inv.reserved : [0, 0, 0, 0, 0, 0, 0, 0]
    inv.SlowChgWatts : 0
    inv.standbyMins : 720
    inv.sysVer : 50331740
    mppt.acStandbyMins : 0
    mppt.beepState : 1
    mppt.carOutAmp : 0
    mppt.carOutVol : 71
    mppt.carOutWatts : 0
    mppt.carStandbyMin : 720
    mppt.carState : 0
    mppt.carTemp : 23
    mppt.cfgAcEnabled : 0
    mppt.cfgAcOutFreq : 60
    mppt.cfgAcOutVol : 0
    mppt.cfgAcXboost : 0
    mppt.cfgChgType : 0
    mppt.cfgChgWatts : 1400
    mppt.chgPauseFlag : 0
    mppt.chgState : 0
    mppt.chgType : 0
    mppt.dc24vState : 0
    mppt.dc24vTemp : 0
    mppt.dcChgCurrent : 4000
    mppt.dcdc12vAmp : 0
    mppt.dcdc12vVol : 0
    mppt.dcdc12vWatts : 0
    mppt.dischargeType : 0
    mppt.inAmp : 3
    mppt.inVol : 1432
    mppt.inWatts : 0
    mppt.mpptTemp : 21
    mppt.outAmp : 0
    mppt.outVol : 52916
    mppt.outWatts : 0
    mppt.powStandbyMin : 720
    mppt.res : [0, 0, 0, 0, 0]
    mppt.scrStandbyMin : 120
    mppt.swVer : 83886227
    mppt.x60ChgType : 0
    pd.beepMode : 0
    pd.brightLevel : 3
    pd.carState : 0
    pd.carTemp : 23
    pd.carUsedTime : 0
    pd.carWatts : 0
    pd.chgDsgState : 0
    pd.chgPowerAC : 0
    pd.chgPowerDC : 0
    pd.chgSunPower : 0
    pd.dcInUsedTime : 0
    pd.dcOutState : 0
    pd.dsgPowerAC : 0
    pd.dsgPowerDC : 0
    pd.errCode : 0
    pd.ext3p8Port : 0
    pd.ext4p8Port : 0
    pd.extRj45Port : 0
    pd.icoBytes : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    pd.invUsedTime : 0
    pd.lcdOffSec : 1800
    pd.model : 80
    pd.mpptUsedTime : 0
    pd.qcUsb1Watts : 0
    pd.qcUsb2Watts : 0
    pd.remainTime : -5939
    pd.reserved : [0, 0]
    pd.soc : 100
    pd.standbyMin : 0
    pd.sysVer : 16908373
    pd.typec1Temp : 0
    pd.typec1Watts : 0
    pd.typec2Temp : 0
    pd.typec2Watts : 0
    pd.typecUsedTime : 0
    pd.usb1Watts : 0
    pd.usb2Watts : 0
    pd.usbqcUsedTime : 0
    pd.usbUsedTime : 0
    pd.wattsInSum : 0
    pd.wattsOutSum : 0
    pd.wifiAutoRcvy : 0
    pd.wifiRssi : 0
    pd.wifiVer : 0
    pd.wireWatts : 0
    USBoutput : 0
    mppt.faultCode : 0

River data list

        
	    	"inv.errCode": 0,
	    	"inv.outputWatts": 0,
		"inv.invOutFreq": 0,
		"inv.chargerType": 255,
		"inv.fanState": 0,
		"latestTimeStamp": 1673971927793,
		"inv.inTemp": 37,
	    	"inv.cfgAcEnabled": 0,
	    	"inv.cfgAcXboost": 1,
	    	"inv.outTemp": 27,
		"inv.invType": 0,
		"inv.invOutVol": 0,
		"inv.invInAmp": 0,
	    	"inv.inputWatts": 0,
		"inv.invInFreq": 60,
             pd.wattsInSum": 131,
        "pd.dcInUsedTime": 158,
        "pd.chgPowerDC": 8,
        "pd.dsgPowerDC": 139,
        "pd.model": 2,
            "pd.ledState": 0, << 0-off, 1-Normal, 2-bright, 3-SOS/Signal
        "pd.beepState": 0,
        "pd.remainTime": 5999,
        "pd.usb3Watts": 0,
        "pd.typecUsedTime": 2460,
        "pd.typecWatts": 0,
        "pd.usbqcUsedTime": 27542,
        "pd.chgSunPower": 153,
        "pd.wattsOutSum": 131,
        "pd.carSwitch": 0,
        "pd.carTemp": 20,
        "pd.usbUsedTime": 10102,
        "pd.mpptUsedTime": 4358,
        "pd.ledWatts": 0,
        "pd.usb1Watts": 0,
        "pd.standByMode": 120,
        "pd.dsgPowerAC": 393911,
        "pd.chgPowerAC": 405979,
        "pd.errCode": 0,
        "pd.bmsSlave": 1,
        "pd.sysVer": 16843540,
        "pd.carWatts": 0,
        "pd.carUsedTime": 2362,
        "pd.usb2Watts": 0,
        "pd.soc": 99,
        "pd.typecTemp": 22,
        "pd.invUsedTime": 14132865    


Delta pro data list

 bmsMaster.amp : -270 
bmsMaster.bmsFault : 0 
bmsMaster.bqSysStatReg : 128 
bmsMaster.cellId : 2 
bmsMaster.cycles : 36 
bmsMaster.designCap : 80000 
bmsMaster.errCode : 6 
bmsMaster.f32ShowSoc : 97.773994 
bmsMaster.fullCap : 68499 
bmsMaster.inputWatts : 0 
bmsMaster.maxCellTemp : 16 
bmsMaster.maxCellVol : 3333 
bmsMaster.maxMosTemp : 16 
bmsMaster.minCellTemp : 15 
bmsMaster.minCellVol : 3318 
bmsMaster.minMosTemp : 16 
bmsMaster.num : 0 
bmsMaster.openBmsIdx : 1 
bmsMaster.outputWatts : 0 
bmsMaster.remainCap : 66974 
bmsMaster.remainTime : 0 
bmsMaster.soc : 98 
bmsMaster.soh : 0 
bmsMaster.sysVer : 16843029 
bmsMaster.tagChgAmp : 48000 
bmsMaster.temp : 15 
bmsMaster.type : 1 
bmsMaster.vol : 49969 
bmsSlave1.amp : 0 
bmsSlave1.bmsFault : 0 
bmsSlave1.bqSysStatReg : 128 
bmsSlave1.cellId : 2 
bmsSlave1.cycles : 29 
bmsSlave1.designCap : 80000 
bmsSlave1.errCode : 6 
bmsSlave1.f32ShowSoc : 100 
bmsSlave1.fullCap : 63544 
bmsSlave1.inputWatts : 0 
bmsSlave1.maxCellTemp : 13 
bmsSlave1.maxCellVol : 3345 
bmsSlave1.maxMosTemp : 14 
bmsSlave1.minCellTemp : 13 
bmsSlave1.minCellVol : 3336 
bmsSlave1.minMosTemp : 14 
bmsSlave1.num : 1 
bmsSlave1.openBmsIdx : 1 
bmsSlave1.outputWatts : 0 
bmsSlave1.remainCap : 64491 
bmsSlave1.remainTime : 12898 
bmsSlave1.soc : 100 
bmsSlave1.soh : 0 
bmsSlave1.sysVer : 16777493 
bmsSlave1.tagChgAmp : 48000 
bmsSlave1.temp : 13 
bmsSlave1.type : 1 
bmsSlave1.vol : 50166 
cdtype : 3 
inv.acDipSwitch : 2 
inv.acInAmp : 0 
inv.acInFreq : 60 
inv.acInVol : 122975 
inv.acPassByAutoEn : 0 
inv.cfgAcEnabled : 1 
inv.cfgAcOutFreq : 2 
inv.cfgAcOutVoltage : 120000 
inv.cfgAcWorkMode : 0 
inv.cfgAcXboost : 0 
inv.cfgFastChgWatts : 0 
inv.cfgSlowChgWatts : 1800 
inv.cfgStandbyMin : 0 
inv.chargerType : 0 
inv.chgPauseFlag : 0 
inv.dcInAmp : 0 
inv.dcInTemp : 25 
inv.dcInVol : 0 
inv.dischargeType : 1 
inv.errCode : 0 
inv.fanState : 0 
inv.inputWatts : 0 
inv.invOutAmp : 191 
inv.invOutFreq : 60 
inv.invOutVol : 122408 
inv.invType : 0 
inv.outputWatts : 0 
inv.outTemp : 20 
inv.sysVer : 33620303 
mppt.carOutAmp : 0 
mppt.carOutVol : 0 
mppt.carOutWatts : 0 
mppt.carState : 0 
mppt.carTemp : 0 
mppt.cfgChgType : 0 
mppt.cfgDcChgCurrent : 8000 
mppt.chgPauseFlag : 0 
mppt.chgState : 0 
mppt.chgType : 0 
mppt.dc24vState : 1 
mppt.dc24vTemp : 26 
mppt.dcdc12vAmp : 0 
mppt.dcdc12vVol : 0 
mppt.dcdc12vWatts : 0 
mppt.faultCode : 0 
mppt.inAmp : 0 
mppt.inVol : 0 
mppt.inWatts : 0 
mppt.mpptTemp : 23 
mppt.outAmp : 2 
mppt.outVol : 490 
mppt.outWatts : 13 
mppt.swVer : 50397216 
mppt.xt60ChgType : 0 
pd.beepState : 1 
pd.carState : 0 
pd.carTemp : 0 
pd.carUsedTime : 825546 
pd.carWatts : 0 
pd.chgPowerAc : 246460 
pd.chgPowerDc : 0 
pd.chgSunPower : 10038 
pd.dcInUsedTime : 0 
pd.dcOutState : 1 
pd.dsgPowerAc : 152801 
pd.dsgPowerDc : 7610 
pd.errCode : 0 
pd.ext3p8Port : 0 
pd.ext4p8Port : 1 
pd.extRj45Port : 0 
pd.iconAcFreqMode : 0 
pd.iconAcFreqState : 0 
pd.iconBmsErrMode : 0 
pd.iconBmsErrState : 0 
pd.iconBmsParallelMode : 0 
pd.iconBmsParallelState : 0 
pd.iconBtMode : 0 
pd.iconBtState : 0 
pd.iconCarMode : 1 
pd.iconCarState : 0 
pd.iconChgStationMode : 0 
pd.iconChgStationState : 0 
pd.iconCoGasMode : 0 
pd.iconCoGasState : 0 
pd.iconEcoMode : 0 
pd.iconEcoState : 0 
pd.iconFactoryMode : 0 
pd.iconFactoryState : 0 
pd.iconFanMode : 0 
pd.iconFanState : 0 
pd.iconGasGenMode : 0 
pd.iconGasGenState : 0 
pd.iconHiTempMode : 0 
pd.iconHiTempState : 0 
pd.iconInvParallelMode : 1 
pd.iconInvParallelState : 0 
pd.iconLowTempMode : 0 
pd.iconLowTempState : 0 
pd.iconOverloadMode : 0 
pd.iconOverloadState : 0 
pd.iconPackHeaterMode : 0 
pd.iconPackHeaterState : 0 
pd.iconRcMode : 0 
pd.iconRcState : 0 
pd.iconRechgTimeMode : 0 
pd.iconRechgTimeState : 0 
pd.iconSocUpsMode : 1 
pd.iconSocUpsState : 0 
pd.iconSolarBracketMode : 0 
pd.iconSolarBracketState : 0 
pd.iconSolarPanelMode : 0 
pd.iconSolarPanelState : 0 
pd.iconTransSwMode : 0 
pd.iconTransSwState : 0 
pd.iconTypecMode : 0 
pd.iconTypecState : 0 
pd.iconUsbMode : 0 
pd.iconUsbState : 0 
pd.iconWifiMode : 0 
pd.iconWifiState : 0 
pd.iconWindGenMode : 0 
pd.iconWindGenState : 0 
pd.iconWirelessChgMode : 0 
pd.iconWirelessChgState : 0 
pd.invUsedTime : 8051057 
pd.kit1 : 0 
pd.lcdBrightness : 128 
pd.lcdOffSec : 300 
pd.model : 2 
pd.mpptUsedTime : 47807 
pd.qcUsb1Watts : 0 
pd.qcUsb2Watts : 0 
pd.remainTime : 13394 
pd.soc : 98 
pd.standByMode : 0 
pd.sysChgDsgState : 1 
pd.sysVer : 16908366 
pd.typccUsedTime : 2372 
pd.typec1Temp : 16 
pd.typec1Watts : 0 
pd.typec2Temp : 16 
pd.typec2Watts : 0 
pd.usb1Watts : 0 
pd.usb2Watts : 0 
pd.usbqcUsedTime : 3088069 
pd.usbUsedTime : 310927 
pd.wattsInSum : 0 
pd.wattsOutSum : 0 
pd.wifiAutoRcvy : 0 
pd.wifiRssi : 0 
pd.wifiVer : 196609 
pd.wirelessWatts : 0 


 */

import groovy.json.JsonSlurper;

metadata {
    definition (name: "EcoFlow Delta2 mqtt", namespace: "EFmqtt", author: "Darryl Dimond", importURL: "not listed") {
         capability "Initialize"
        capability "Actuator"
        capability "Battery"
        capability "PowerMeter"
        capability "TemperatureMeasurement"
        command "ACSwitchON"
        command "ACSwitchOFF"
        command "DCSwitchON"
        command "DCSwitchOFF"
        command "USBSwitchON"
        command "USBSwitchOFF"
        command "LEDSwitchON"
        command "LEDSwitchOFF"
        command "refreshdata"
      
        
     //   ***** to load varibales to current states - add variable names that you see in device states or listed above.  
     //   ***** Only attributes defined here will be sent to current states and be available for rules/dashboards.
     //   When loading names here - replace all . (dots) with underscores  bms_bmsStatus.cycles = bms_bmsStatus_cycles
     //   Initialize button is required to load new attributes listed here.  
        attribute "bms_bmsStatus_cycles", "number"
        attribute "bms_bmsStatus_errCode", "number"
        attribute "bms_bmsStatus_cycles", "number"
        attribute "bms_bmsStatus_errCode", "number"
        attribute "bms_bmsStatus_f32ShowSoc", "number"
        attribute "bms_bmsStatus_inputWatts", "number"
        attribute "bms_bmsStatus_maxCellTemp", "number"
        attribute "bms_bmsStatus_maxMosTemp", "number"
        attribute "bms_bmsStatus_minCellTemp", "number"
        attribute "bms_bmsStatus_minMosTemp", "number"
        attribute "bms_bmsStatus_outputWatts", "number"
        attribute "bms_bmsStatus_remainTime", "number"
        attribute "bmsStatus_socdistance", "number"
        attribute "bms_bmsStatus_temp", "number"
        attribute "bms_emsStatus_chgRemainTime", "number"
        attribute "bms_emsStatus_f32LcdShowSoc", "number"
        attribute "bms_slave_cycles", "number"
        attribute "bms_slave_f32ShowSoc", "number"
        attribute "bms_slave_maxCellTemp", "number"
        attribute "bms_slave_maxMosTemp", "number"
        attribute "bms_slave_minCellTemp", "number"
        attribute "bms_slave_minMosTemp", "number"
        attribute "bms_slave_outputWatts", "number"
        attribute "bms_slave_remainTime", "number"
        attribute "bms_slave_soc", "number"
        attribute "bms_slave_temp", "number"
        attribute "inv_cfgAcEnabled", "number"
        attribute "inv_cfgAcXboost", "number"
        attribute "inv_inputWatts", "number"
        attribute "inv_invOutAmp", "number"
        attribute "mppt_carState", "number"
        attribute "pd_dcOutState", "number"
        attribute "pd_soc", "number"
        attribute "ACoutput", "number"
        attribute "mppt_faultCode" , "number"
        attribute "inv_outputWatts" , "number"
        attribute "last update", "date"
        // River loads
        attribute "inv_errCode" , "number"
	    attribute "inv_outputWatts" , "number"
        attribute "inv_cfgAcEnabled", "number"
	    attribute "inv_cfgAcXboost", "number"
	    attribute "inv_outTemp" , "number"
        attribute "inv_inputWatts", "number"
		attribute "inv_invInFreq", "number"
        attribute  "pd_wattsInSum", "number"
        attribute  "pd_ledState" , "number"
      // data pro loads
        attribute "bmsMaster_inputWatts" , "number"
	    attribute "bmsMaster_temp" , "number"
        attribute "bmsSlave1_errCode", "number"
	    attribute "bmsSlave1_f32ShowSoc", "number"
	    attribute "bmsSlave1_remainTime", "number"
		attribute "bmsSlave1_soc", "number"
        attribute  "bmsSlave1_temp", "number"
        attribute  "pd_ledState" , "number"
        attribute  "bmsMaster_f32ShowSoc" , "number"
        
 
       
	   }


    preferences {
        input name: "unitserialno", type: "text", title: "serial number of unit:", required: true, displayDuringSetup: true
        input name: "mqttclientname", type: "text", title: "mqttclientname:", required: true, displayDuringSetup: true
        input name: "MQTTBroker", type: "text", title: "MQTT Broker Address:", required: true, displayDuringSetup: true
		input name: "username", type: "text", title: "MQTT Username:", description: "(blank if none)", required: false, displayDuringSetup: true
		input name: "password", type: "text", title: "MQTT Password:", description: "(blank if none)", required: false, displayDuringSetup: true
        input name: "EFmodel", type: "text", title: "EF model:", description: "options are delta2 deltapro or river - no caps", required: true, displayDuringSetup: true, defaultValue: "delta"
	    input("logEnable", "bool", title: "Enable logging", required: true, defaultValue: true)
        input name: "updateTime", type: "number", title: "Background Data Refresh Rate (Seconds)", required: false, defaultValue: 300, displayDuringSetup: true
        input("deltaflag", "bool", title: "flag changes", description: "Turn on to locate data points that have changed since last scan - refresh webpage to clear" , required: true, defaultValue: false)
        //    input( name: "htmlTemplate", type: "string", title: "<b>Tile Template</b>", description: "<font size='2'>Ex: [b]Remaining Minutes:[/b] \${ remainMins }V[/br]</font>", defaultValue: "");
    }

}


def installed() {
    log.info "installed dd..."
}


// Parse incoming device messages to generate events
def parse(String description) {
    log.info "pares() running"
    log.info updateTime
    runIn(updateTime, refreshdata)
    Date date = new Date(); 
	topic = interfaces.mqtt.parseMessage(description).topic
	topic = topic.substring(topic.lastIndexOf("/") + 1)
    payload = interfaces.mqtt.parseMessage(description).payload
    def jsonSlurper = new JsonSlurper()
    def jsonpl = jsonSlurper.parseText(payload) 
    if (logEnable) log.debug payload
    def jsonObject = new JsonSlurper().parseText(payload)
    if (logEnable)  log.info "updating current states"
   // scan through each JSON point - Process data 
    jsonpl.data.quotaMap.each{
         keyAlphaOnly = it.key.replace(".","_");  // Get the dots out
         if (deltaflag) {  //if delta attribute list feature is on - then list changed attributes to current states 
               if (state."${ it.key }" != it.value) {
                  sendEvent(name: keyAlphaOnly +"**was", value: state."${ it.key }", isStateChanged: true )
                  sendEvent(name: keyAlphaOnly +"**now", value: it.value, isStateChanged: true ) 
               }
          }
         oldstatevar = state."${ it.key }"
         if (state."${ it.key }" != it.value) {  
             state."${ it.key }" = it.value   // load all the state values for display in device states
           if (logEnable)  log.info "update device state variable " + it.key + " value:" + it.value + " old value:" + oldstatevar
         }
         keyvalue = device.currentValue("$keyAlphaOnly") //save current device attribute to variable keyvalue.
            if (state.reloadData == 0) {  // If data reload flag is 0 grab new attributes by loading all to current states
               sendEvent(name: "${keyAlphaOnly}", value: it.value, isStateChanged: true )
        
            }   
            if (keyvalue != null) {  //if device attrubute is defined (not null) - update attribute - 
                if (keyvalue != it.value) { // if attribute value has not chnaged - skip it
                   sendEvent(name: "${keyAlphaOnly}", value: it.value , isStateChanged: true ) 
                   log.info "<b>**update device current state**</b> " + keyAlphaOnly + " value:" + it.value + " old value:" + keyvalue
                } 
           }       
    }
   sendEvent(name: "last update", value: date, displayed: false)

// Get JSON varaible for device outputs - case by model
   switch (EFmodel) {
    case "delta2": 
         log.info "delta2 set-up loaded"
         ACOutput_Enabled = jsonpl.data.quotaMap."inv.cfgAcEnabled"
         DCOutput_Enabled = jsonpl.data.quotaMap."mppt.carState"
         USBOutput_Enabled = jsonpl.data.quotaMap."pd.dcOutState"
         LEDOutput_Enabled = jsonpl.data.quotaMap."pd.ledState"
         sendEvent(name: "battery" , value: jsonpl.data.quotaMap."bms_emsStatus.lcdShowSoc", unit: "%", isStateChanged: true )
         sendEvent (name: "power" , value: jsonpl.data.quotaMap."inv.outputWatts", unit: "W", isStateChanged: true )
         sendEvent (name: "temperature" , value: jsonpl.data.quotaMap."bms_bmsStatus.temp", unit: "°C", isStateChanged: true )
      break
      case "river":
         log.info "river set-up loaded"
         ACOutput_Enabled = jsonpl.data.quotaMap."inv.cfgAcEnabled"
         DCOutput_Enabled = jsonpl.data.quotaMap."mppt.carState"
         USBOutput_Enabled = jsonpl.data.quotaMap."pd.dcOutState"
         LEDOutput_Enabled = jsonpl.data.quotaMap."pd.ledState"
         sendEvent(name: "battery" , value: jsonpl.data.quotaMap."pd.soc", unit: "%", isStateChanged: true )
         sendEvent (name: "power" , value: jsonpl.data.quotaMap."inv.outputWatts", unit: "W", isStateChanged: true )
         sendEvent (name: "temperature" , value: jsonpl.data.quotaMap."inv.outTemp", unit: "°C", isStateChanged: true )
      break 
      case "deltapro":
         log.info "deltapro set-up loaded"
         ACOutput_Enabled = jsonpl.data.quotaMap."inv.cfgAcEnabled"
         DCOutput_Enabled = jsonpl.data.quotaMap."mppt.carState"
         USBOutput_Enabled = jsonpl.data.quotaMap."pd.dcOutState"
         LEDOutput_Enabled = jsonpl.data.quotaMap."pd.ledState"
         sendEvent(name: "battery" , value: jsonpl.data.quotaMap."bmsMaster.soc", unit: "%", isStateChanged: true )
         sendEvent (name: "power" , value: jsonpl.data.quotaMap."inv.outputWatts", unit: "W", isStateChanged: true )
         sendEvent (name: "temperature" , value: jsonpl.data.quotaMap."bmsMaster.temp", unit: "°C", isStateChanged: true )
       break
       default : 
         DCOutput_Enabled = null
         USBOutput_Enabled = null
         LEDOutput_Enabled = null
         log.info "model type not found in parse"+ EFmodel
      }
      
     //check if output states have changed and update the child's state if required.
    if( ACOutput_Enabled != state.ACoutput ){ 
        state.cdtype = 1
        def cd = fetchChild("Switch")
         if ( ACOutput_Enabled == 1 ){
             cd.parse([[name:"switch", value:"on", descriptionText:"AC Switch was turned on"]])  
             state.ACoutput = 1
             state.ACoutputSTR = "Enabled"
         } else {
             cd.parse([[name:"switch", value:"off", descriptionText:"AC Switch was turned off"]])
             state.ACoutput  = 0
             state.ACoutputSTR = "OFF"
         }
     }
     if( DCOutput_Enabled != state.DCoutput ){ 
        state.cdtype = 2
        def cd = fetchChild("Switch")
        if ( DCOutput_Enabled == 1 ){
             cd.parse([[name:"switch", value:"on", descriptionText:"DC Switch was turned on"]])  
             state.DCoutput = 1
             state.DCoutputSTR = "Enabled"
        } else {
             cd.parse([[name:"switch", value:"off", descriptionText:"DC Switch was turned off"]])
             state.DCoutput  = 0
             state.DCoutputSTR = "OFF"
        }
     }
    if( USBOutput_Enabled != state.USBoutput ){ 
        state.cdtype = 3
        def cd = fetchChild("Switch")
        if ( USBOutput_Enabled == 1 ){
             cd.parse([[name:"switch", value:"on", descriptionText:"USB Switch was turned on"]])  
             state.USBoutput = 1
             state.USBoutputSTR = "Enabled"
        } else {
             cd.parse([[name:"switch", value:"off", descriptionText:"USB Switch was turned off"]])
             state.USBoutput  = 0
             state.USBoutputSTR = "OFF"
        }
     }
     
     if( LEDOutput_Enabled != state.LEDoutput ){ 
        state.cdtype = 4
        def cd = fetchChild("Switch")
        if ( LEDOutput_Enabled == 1 ){
             cd.parse([[name:"switch", value:"on", descriptionText:"LED Light was turned on"]])  
             state.LEDoutput = 1
             state.LEDoutputSTR = "Enabled"
        } else {
             cd.parse([[name:"switch", value:"off", descriptionText:"LED light was turned off"]])
             state.LEDoutput  = 0
             state.LEDoutputSTR = "OFF"
        }
     }
       
      
  if (logEnable)  log.info "current states updated"
    state.reloadData = 1
    updateHtml()
    UpdateTile()
} 
 //refresh data by sending mqtt command requesting data update
def refreshdata() {
    if (state.refreshpayload == null){
        log.info "no MQTT string - check inputs for defined EF model - Hit the Save Preferences button and then the Initialize Button "
    }
    ptopic = "/app/" +mqttclientname + "/" + unitserialno + "/thing/property/get"
    interfaces.mqtt.publish(ptopic, state.refreshpayload )
  }
 
def publishMsg(String s) {
 //   Not a working feature
    if (logEnable) log.debug "Sent this: ${s} to ${settings?.topicPub} - QOS Value: ${settings?.QOS.toInteger()} - Retained: ${settings?.retained}"
    interfaces.mqtt.publish(settings?.topicPub, s, settings?.QOS.toInteger(), settings?.retained)
}

def updated() {
    log.info "update running"
    if (logEnable) log.info "Updated..."
    initialize()
}

def uninstalled() {
    //   Not a working feature   
    if (logEnable) log.info "Disconnecting from mqtt"
    interfaces.mqtt.disconnect()
    log.info "MQTT disconnected"
    
}
def initialize() {
    if (logEnable)log.info "initialize"
	if (logEnable) runIn(900,logsOff)
    if (deltaflag) runIn(900,deltaflagOFF)
    device.updateSetting("Deltaflag",[value:"false",type:"bool"])
    switch (EFmodel) {
    case "delta2":
       state.AConPayload = /{"from":"Android","id":"498321003","moduleType":5,"operateType":"acOutCfg","params":{"out_voltage":-1,"out_freq":255,"xboost":255,"enabled":1},"version":"1.0"}/
       state.ACoffPayload = /{"from":"Android","id":"498321003","moduleType":5,"operateType":"acOutCfg","params":{"out_voltage":-1,"out_freq":255,"xboost":255,"enabled":0},"version":"1.0"}/
       state.DConPayload = /{"from":"Android","id":"498321003","moduleType":5,"operateType":"mpptCar","params":{"enabled":1},"version":"1.0"}/
       state.DCoffPayload = /{"from":"Android","id":"498321003","moduleType":5,"operateType":"mpptCar","params":{"enabled":0},"version":"1.0"}/
       state.USBonPayload = /{"from":"Android","id":"498321003","moduleType":1,"operateType":"dcOutCfg","params":{"enabled":1},"version":"1.0"}/
       state.USBoffPayload = /{"from":"Android","id":"498321003","moduleType":1,"operateType":"dcOutCfg","params":{"enabled":0},"version":"1.0"}/
       state.LEDonPayload = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 00,"state": 1},"version": "1.0"}/
       state.LEDoffPayload =/{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 00,"state": 0},"version": "1.0"}/
       state.refreshpayload = /{"from":"Android","id":"380541001","moduleType":0,"operateType":"latestQuotas","params":{},"version":"1.0"}/ 
    break
    case "river": 
       state.AConPayload =  /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 66,"enabled": 1},"version":"1.0"}/
       state.ACoffPayload = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 66,"enabled": 0},"version":"1.0"}/
       state.DConPayload =  /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 34,"enabled": 1},"version": "1.0"}/
       state.DCoffPayload = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 34,"enabled": 0},"version": "1.0"}/
       state.USBonPayload = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 72,"enabled": 1},"version": "1.0"}/
       state.USBoffPayload =/{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 72,"enabled": 0},"version": "1.0"}/
       state.LEDonPayload = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 35,"state": 1},"version": "1.0"}/
       state.LEDoffPayload =/{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 35,"state": 0},"version": "1.0"}/
       state.refreshpayload = /{"from":"Android","id":"380541001","moduleType":0,"operateType":"latestQuotas","params":{},"version":"1.0"}/
    break
        case "deltapro":
       state.AConPayload =  /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 66,"enabled": 1},"version":"1.0"}/
       state.ACoffPayload = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 66,"enabled": 0},"version":"1.0"}/
       state.DConPayload =  /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 81,"enabled": 1},"version": "1.0"}/
       state.DCoffPayload = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 81,"enabled": 0},"version": "1.0"}/
       state.USBonPayload = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 72,"enabled": 1},"version": "1.0"}/
       state.USBoffPayload =/{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 72,"enabled": 0},"version": "1.0"}/
       state.LEDonPayload = /{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 00,"state": 1},"version": "1.0"}/
       state.LEDoffPayload =/{"from": "Android","id": "498321003","moduleType": 0,"operateType":"TCP","params": {"id": 00,"state": 0},"version": "1.0"}/
       state.refreshpayload = /{"from":"Android","id":"380541001","moduleType":0,"operateType":"latestQuotas","params":{},"version":"1.0"}/
     break
     default :
       state.AConPayload =  null
       state.ACoffPayload = null
       state.DConPayload =  null
       state.DCoffPayload = null
       state.USBonPayload = null
       state.USBoffPayload =null
       state.LEDonPayload = null
       state.LEDoffPayload =null
       state.refreshpayload = null
       log.info "model type not found"+ EFmodel   
       
    }
    log.info "data stream in " + updateTime + "seconds"
    state.reloadData = 0
    log.info "reset initialize flag=" + state.reloadData
    mqttConnect()
    refreshdata()
}

//set up mqtt server connection
def mqttConnect() {
	try {
        if(settings?.retained==null) settings?.retained=false
        if(settings?.QOS==null) setting?.QOS="0"
      //open connection
           mqttbroker = "ssl://" + settings?.MQTTBroker + ":8883"
           settings?.topicSub = "/app/" + mqttclientname + "/" + unitserialno + "/thing/property/get_reply"
         if (logEnable) log.info "broker " + mqttbroker 
         if (logEnable) log.info "client " + mqttclientname
         if (logEnable) log.info "username   " + username
         if (logEnable) log.info "password " + password
             interfaces.mqtt.connect(mqttbroker, 
                   mqttclientname, 
                   username,
                   password,
                   lastWillQos: 0,
                   lastWillMessage: "offline",
                   lastWillRetain: true,
                   tlsVersion: 1.2)
            
         if (logEnable) log.info "mqtt.con" + mqttConnect
        //give it a chance to start
        pauseExecution(1000)
        //log.info "Connection established"
		if (logEnable) log.debug "Subscribed to: ${settings?.topicSub}"
           log.info settings?.topicSub
           interfaces.mqtt.subscribe(settings?.topicSub)
        } catch(e) {
        if (logEnable) log.debug "Initialize error: ${e.message}"
    }
}

def mqttClientStatus(String status) {
    log.info "mqttClientStatus dd"
    if(!status.contains("succeeded")) {
        try { interfaces.mqtt.disconnect() }
        catch (e) { }
        
        if(logEnable) log.debug "Broker: ${status} Will restart in 15 seconds"
        runIn (15,mqttConnect)  
    }
} 

def logsOff(){
    log.warn "Debug logging disabled."
    device.updateSetting("logEnable",[value:"false",type:"bool"])
}

def deltaflagOFF(){
log.warn "Deltaflag disabled."
    device.updateSetting("Deltaflag",[value:"false",type:"bool"])
}

//demo custom commands
void componentRefresh(cd){
     log.info "received refresh request from ${cd.displayName}"
      refreshdata()
}

//when switch state changes are requested - update the child and send MQTT commmand to change device - 
// wait for 5 seconds and then request mqtt data refresh
void ACSwitchON(){
    state.cdtype = 1
    def cd = fetchChild("Switch")  
    log.info "ACSwitchON cd on=" + cd
    cd.parse([[name:"switch", value:"on", descriptionText:"AC Switch was turned on"]])
    log.info "AC switch on request"
    ptopic = "/app/" +mqttclientname + "/" + unitserialno + "/thing/property/set"
    log.info "topic=" + ptopic + " payload=" + state.AConPayload
    interfaces.mqtt.publish(ptopic, state.AConPayload )
    pauseExecution(5000)
    refreshdata()   
}

void ACSwitchOFF(){
    state.cdtype = 1
    def cd = fetchChild("Switch")  
    log.info "ACSwitchOFF cd off=" + cd
    cd.parse([[name:"switch", value:"off", descriptionText:"AC Switch was turned off"]])
    ptopic = "/app/" +mqttclientname + "/" + unitserialno + "/thing/property/set"
    log.info "topic=" + ptopic + " payload=" + state.ACoffPayload
    interfaces.mqtt.publish(ptopic, state.ACoffPayload ) 
    pauseExecution(5000)
    refreshdata()   
}       
 void DCSwitchON(){
    state.cdtype = 2
    def cd = fetchChild("Switch")  
    cd.parse([[name:"switch", value:"on", descriptionText:"DC Switch was turned on"]])
    ptopic = "/app/" +mqttclientname + "/" + unitserialno + "/thing/property/set"
    log.info "topic=" + ptopic + " payload=" + state.DConPayload
    interfaces.mqtt.publish(ptopic, state.DConPayload )
    pauseExecution(5000)
    refreshdata() 
    
}
void DCSwitchOFF(){
    state.cdtype = 2
    def cd = fetchChild("Switch")  
    log.info "DCSwitchOFF cd off=" + cd
    cd.parse([[name:"switch", value:"off", descriptionText:"DC Switch was turned off"]])
    log.info "DC switch off request"
    ptopic = "/app/" +mqttclientname + "/" + unitserialno + "/thing/property/set"
    log.info "topic=" + ptopic + " payload=" + state.DCoffPayload
    interfaces.mqtt.publish(ptopic, state.DCoffPayload )
    pauseExecution(5000)
    refreshdata()
       
}   
void USBSwitchON(){
    state.cdtype = 3
    def cd = fetchChild("Switch")  
    log.info "USBSwitchON cd on=" + cd
    cd.parse([[name:"switch", value:"on", descriptionText:"USB Switch was turned on"]])
    log.info "USB switch on request"
    ptopic = "/app/" +mqttclientname + "/" + unitserialno + "/thing/property/set"
    log.info "topic=" + ptopic + " payload=" + state.USBonPayload
    interfaces.mqtt.publish(ptopic, state.USBonPayload )
    pauseExecution(5000)
    refreshdata()
}
void USBSwitchOFF(){
    state.cdtype = 3
    def cd = fetchChild("Switch")  
    log.info "USBSwitchOFF cd off=" + cd
    cd.parse([[name:"switch", value:"off", descriptionText:"USB Switch was turned off"]])
    log.info "USB switch off request"
    ptopic = "/app/" +mqttclientname + "/" + unitserialno + "/thing/property/set"
    log.info "topic=" + ptopic + " payload=" + state.USBoffPayload
    interfaces.mqtt.publish(ptopic, state.USBoffPayload )
    pauseExecution(5000)
    refreshdata()
}  

void LEDSwitchON(){
    state.cdtype = 4
    def cd = fetchChild("Switch")  
    log.info "LEDSwitchOFF cd on=" + cd
    cd.parse([[name:"switch", value:"on", descriptionText:"LED Light was turned on"]])
    log.info "LED light on request"
    ptopic = "/app/" +mqttclientname + "/" + unitserialno + "/thing/property/set"
    log.info "topic=" + ptopic + " payload=" + state.LEDonPayload
    interfaces.mqtt.publish(ptopic, state.LEDonPayload )
    pauseExecution(5000)
    refreshdata()
}   
void LEDSwitchOFF(){
    state.cdtype = 4
    def cd = fetchChild("Switch")  
    log.info "LEDSwitchOFF cd off=" + cd
    cd.parse([[name:"switch", value:"off", descriptionText:"LED Light was turned off"]])
    log.info "LED light off request"
    ptopic = "/app/" +mqttclientname + "/" + unitserialno + "/thing/property/set"
    log.info "topic=" + ptopic + " payload=" + state.LEDoffPayload
    interfaces.mqtt.publish(ptopic, state.LEDoffPayload )
    pauseExecution(5000)
    refreshdata()
}   


//get data for switches 1, 2, and 3. If child1 does not exist - create all of them.
def fetchChild(String type){ 
    String thisId = device.id
    log.info "fetchChild run >> thisID=" + thisId +  " cdtype=" + state.cdtype
       def cd = getChildDevice("${thisId}${state.cdtype}-Switch")
       log.info "fetchchild CD=" + cd
        if (!cd) {
           cd =  addChildDevice("hubitat", "Generic Component Switch", "${thisId}1-Switch", [name: "EF AC Switch", isComponent: true])
           cd1 = addChildDevice("hubitat", "Generic Component Switch", "${thisId}2-Switch", [name: "EF DC Switch", isComponent: true])
           cd2 = addChildDevice("hubitat", "Generic Component Switch", "${thisId}3-Switch", [name: "EF USB Switch", isComponent: true])  
           cd3 = addChildDevice("hubitat", "Generic Component Switch", "${thisId}4-Switch", [name: "EF LED Switch", isComponent: true]) 
           log.info "type=" +type + " thisid=" + thisId + "displayname=" + device.displayName
           List<Map> defaultValues = []
           cd.parse(defaultValues)
        }
    return cd      
}

// child has requested state change to ON - determine what child is asking for change and run sequence to update device
void componentOn(cd){
      getChildDevice(cd.deviceNetworkId).parse([[name:"switch", value:"on", descriptionText:"${cd.displayName} was turned on"]])
        switch (cd.displayName) {
            case "EF AC Switch":
                ACSwitchON()
                break
            case "EF USB Switch":
                USBSwitchON()
                break
            case "EF DC Switch":
                DCSwitchON()
                break
            case "EF LED Switch":
                LEDSwitchON()
                break
      }         
}

// child has requested state change to OFF - determine what child is asking for change and run sequence to update device
void componentOff(cd){
     getChildDevice(cd.deviceNetworkId).parse([[name:"switch", value:"off", descriptionText:"${cd.displayName} was turned off"]])
        switch (cd.displayName) {
        case "EF AC Switch":
            ACSwitchOFF()
            break
        case "EF USB Switch":
            USBSwitchOFF()
            break
        case "EF DC Switch":
            DCSwitchOFF()
            break
        case "EF LED Switch":
            LEDSwitchOFF()
            break
        }
}
   // Process data to check against current state value and then send an event if it has changed
// not working
def ProcessEvent( Variable, Value, Unit = null ){
        if( state."${ Variable }" != Value ){
        state."${ Variable }" = Value
        if( Unit != null ){
            Logging( "Event: ${ Variable } = ${ Value }${ Unit }", 4 )
            sendEvent( name: "${ Variable }", value: Value, unit: Unit, isStateChanged: true )
        } else {
            Logging( "Event: ${ Variable } = ${ Value }", 4 )
            sendEvent( name: "${ Variable }", value: Value, isStateChanged: true )
        }
        updateHtml( "${ Value }" )
    }
}

// Process data to check against current state value and then send an event if it has changed
// not working
def ProcessState( Variable, Value ){
    log.info variable + value + "processState"
    if( state."${ Variable }" != Value ){
        Logging( "State: ${ Variable } = ${ Value }", 4 )
        state."${ Variable }" = Value
        updateHtml( "${ Value }" )
    }


} 
// Not working -
private void UpdateTile(){
 //   log.info "update tile " + settings.TileTemplate
     def val = ""
   // Create special compound/html tile
//   val = "<B>Power : </B> "+ device.currentValue("power").toString() + " W</BR><B>Amperage : </B> " + device.currentValue("amperage").toString() + " A</BR><B>Energy : </B> " + device.currentValue("energy").toString() + " KWh</BR><B>Voltage : </B> " + device.currentValue("voltage").toString() + " V"
 //      val1 = "<B>Main SOC : </B> "+ device.currentValue("bms_emsStatus_f32LcdShowSoc").toString() 
       //  val1 = "AC Status:"+ state.ACoutputSTR + " 12v Status:" + state.DCoutputSTR  + " USB Ouputs:" + state.USBoutputSTR
  //    val2 = "Main Cell Temp:"state."bms_bmsStatus.temp"  + "Slave Cell Temp:" + state."bms_slave.temp" 
   // if( device.currentValue( "htmlTile1" ).toString() != val1 ){
   //    sendEvent( name: "htmlTile1", value: val1 )
  //    }
//if( device.currentValue( "htmlTile2" ).toString() != val2 ){
//       sendEvent( name: "htmlTile2", value: val2 )
//      }
    
    
    
    
    
    
    
//    if( settings.TileTemplate ){
 //       def val = settings.TileTemplate.toString().replaceAll( "\\[", "<" )
     //   log.info "tile1=" + val
 //       val = val.replaceAll( "\\]", ">" )
     //   log.info "tile2=" + val
 //       val = val.replaceAll( ~/\$\{\s*([A-Za-z][A-Za-z0-9_]*)\s*\}/ ) { java.util.ArrayList m -> device.currentValue("${ m [ 1 ] }").toString() }
    //    log.info "tile3=" + val
 //       if( device.currentValue( "Tile" ).toString() != val ){
    //        sendEvent( name: "Tile123456789", value: val )
//        }
//    }
}

// HTML Template method created by @mircolino
// Not working - 
private void updateHtml( String val ){
 //  log.info "html=" + settings.htmlTemplate
    
 //   log.info "set initialize flag=" + state.reloadData
    if( settings.htmlTemplate ){
        // Create special compund/html tile
        val = settings.htmlTemplate.toString().replaceAll( ~/\$\{\s*([A-Za-z][A-Za-z0-9_]*)\s*\}/ ) { java.util.ArrayList m -> device.currentValue("${ m [ 1 ] }").toString() }
        if( device.currentValue( "html" ).toString() != val ){
 //           sendEvent( name: "html", value: val )
    //        log.info "update html=" + html + " val=" + val
        }
    }
}




